#!/usr/bin/env ruby

require "rubygems"
require "exfe_cli"
require "commander/import"

program :version, ExfeCli::VERSION
program :description, ExfeCli::DESCRIPTION

include ExfeCli::CliHelper

@engine = ExfeCli::Engine.new

def authenticated?
  File.exists?(config_file_path) && auth_token && auth_token.length > 0
end

def ask_for_credentials
  data = loop do
    identity = ask("Identity: ")
    password = ask("Password: ") { |q| q.echo = false }
    break data if data = @engine.login(identity, password)
    puts 'Identity & password mismatch.'
  end
  open(config_file_path, 'w') { |f| f.write data.to_yaml }
end

ask_for_credentials unless authenticated?

command :crosses do |c|
  c.syntax = 'exfe crosses'
  c.description = 'list my crosses'
  c.action do |args, options|
    @engine.crosses.each { |cross| puts cross[:id].to_s.ljust(8) + cross[:title] }
  end
end

command :cross do |c|
  c.syntax = 'exfe cross CROSS_ID'
  c.description = 'view a cross'
  c.action do |args, options|
    cross = @engine.cross args.first
    puts "#{cross[:title].upcase} - #{cross[:description]}"
    puts "#{extract_place(cross)} at #{to_localtime(cross[:time][:begin_at][:date] + ' ' + cross[:time][:begin_at][:time])}"
    puts
    @engine.conversation(args.first).reverse.each do |conv|
      # puts conv[:by_identity][:name]
      puts "#{to_localtime(conv[:created_at])} #{conv[:by_identity][:name]}:"
      puts conv[:content]
      puts
    end
  end
end

def to_localtime(utc_time)
  Time.parse(utc_time + " UTC").localtime
end

def extract_place(cross)
  [cross[:place][:title], cross[:place][:description]].select { |l| l.length > 0 }.join ', '
end

command :profile do |c|
  c.syntax = 'exfe profile'
  c.description = 'view my profile'
  c.action do |args, options|
    profile = @engine.profile
    puts "Name: #{profile[:name]}"
    puts "Identities:"
    profile[:identities].each do |identity|
      puts identity[:provider].ljust(10) + identity[:external_username]
    end
  end
end

alias_command :s, :crosses
alias_command :p, :profile
alias_command :c, :cross

default_command :crosses